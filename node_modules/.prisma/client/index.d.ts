
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model FamiliaBaixaRenda
 * 
 */
export type FamiliaBaixaRenda = $Result.DefaultSelection<Prisma.$FamiliaBaixaRendaPayload>
/**
 * Model CadUnico
 * 
 */
export type CadUnico = $Result.DefaultSelection<Prisma.$CadUnicoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.familiaBaixaRenda`: Exposes CRUD operations for the **FamiliaBaixaRenda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FamiliaBaixaRendas
    * const familiaBaixaRendas = await prisma.familiaBaixaRenda.findMany()
    * ```
    */
  get familiaBaixaRenda(): Prisma.FamiliaBaixaRendaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cadUnico`: Exposes CRUD operations for the **CadUnico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CadUnicos
    * const cadUnicos = await prisma.cadUnico.findMany()
    * ```
    */
  get cadUnico(): Prisma.CadUnicoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.18.0
   * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import Bytes = runtime.Bytes
  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    FamiliaBaixaRenda: 'FamiliaBaixaRenda',
    CadUnico: 'CadUnico'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "familiaBaixaRenda" | "cadUnico"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      FamiliaBaixaRenda: {
        payload: Prisma.$FamiliaBaixaRendaPayload<ExtArgs>
        fields: Prisma.FamiliaBaixaRendaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FamiliaBaixaRendaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FamiliaBaixaRendaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>
          }
          findFirst: {
            args: Prisma.FamiliaBaixaRendaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FamiliaBaixaRendaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>
          }
          findMany: {
            args: Prisma.FamiliaBaixaRendaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>[]
          }
          create: {
            args: Prisma.FamiliaBaixaRendaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>
          }
          createMany: {
            args: Prisma.FamiliaBaixaRendaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FamiliaBaixaRendaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>[]
          }
          delete: {
            args: Prisma.FamiliaBaixaRendaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>
          }
          update: {
            args: Prisma.FamiliaBaixaRendaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>
          }
          deleteMany: {
            args: Prisma.FamiliaBaixaRendaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FamiliaBaixaRendaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FamiliaBaixaRendaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>[]
          }
          upsert: {
            args: Prisma.FamiliaBaixaRendaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamiliaBaixaRendaPayload>
          }
          aggregate: {
            args: Prisma.FamiliaBaixaRendaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFamiliaBaixaRenda>
          }
          groupBy: {
            args: Prisma.FamiliaBaixaRendaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FamiliaBaixaRendaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FamiliaBaixaRendaCountArgs<ExtArgs>
            result: $Utils.Optional<FamiliaBaixaRendaCountAggregateOutputType> | number
          }
        }
      }
      CadUnico: {
        payload: Prisma.$CadUnicoPayload<ExtArgs>
        fields: Prisma.CadUnicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CadUnicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CadUnicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>
          }
          findFirst: {
            args: Prisma.CadUnicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CadUnicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>
          }
          findMany: {
            args: Prisma.CadUnicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>[]
          }
          create: {
            args: Prisma.CadUnicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>
          }
          createMany: {
            args: Prisma.CadUnicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CadUnicoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>[]
          }
          delete: {
            args: Prisma.CadUnicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>
          }
          update: {
            args: Prisma.CadUnicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>
          }
          deleteMany: {
            args: Prisma.CadUnicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CadUnicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CadUnicoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>[]
          }
          upsert: {
            args: Prisma.CadUnicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CadUnicoPayload>
          }
          aggregate: {
            args: Prisma.CadUnicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadUnico>
          }
          groupBy: {
            args: Prisma.CadUnicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CadUnicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CadUnicoCountArgs<ExtArgs>
            result: $Utils.Optional<CadUnicoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    familiaBaixaRenda?: FamiliaBaixaRendaOmit
    cadUnico?: CadUnicoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    cpf: string | null
    senha: string | null
    nome: string | null
    tipo: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    cpf: string | null
    senha: string | null
    nome: string | null
    tipo: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    cpf: number
    senha: number
    nome: number
    tipo: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    cpf?: true
    senha?: true
    nome?: true
    tipo?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    cpf?: true
    senha?: true
    nome?: true
    tipo?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    cpf?: true
    senha?: true
    nome?: true
    tipo?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    cpf: string
    senha: string
    nome: string
    tipo: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    senha?: boolean
    nome?: boolean
    tipo?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    senha?: boolean
    nome?: boolean
    tipo?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    senha?: boolean
    nome?: boolean
    tipo?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    cpf?: boolean
    senha?: boolean
    nome?: boolean
    tipo?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cpf" | "senha" | "nome" | "tipo", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cpf: string
      senha: string
      nome: string
      tipo: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly cpf: FieldRef<"User", 'String'>
    readonly senha: FieldRef<"User", 'String'>
    readonly nome: FieldRef<"User", 'String'>
    readonly tipo: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model FamiliaBaixaRenda
   */

  export type AggregateFamiliaBaixaRenda = {
    _count: FamiliaBaixaRendaCountAggregateOutputType | null
    _avg: FamiliaBaixaRendaAvgAggregateOutputType | null
    _sum: FamiliaBaixaRendaSumAggregateOutputType | null
    _min: FamiliaBaixaRendaMinAggregateOutputType | null
    _max: FamiliaBaixaRendaMaxAggregateOutputType | null
  }

  export type FamiliaBaixaRendaAvgAggregateOutputType = {
    id: number | null
    rendaFamiliar: number | null
    membros: number | null
  }

  export type FamiliaBaixaRendaSumAggregateOutputType = {
    id: number | null
    rendaFamiliar: number | null
    membros: number | null
  }

  export type FamiliaBaixaRendaMinAggregateOutputType = {
    id: number | null
    chefeFamiliaCPF: string | null
    nomeChefe: string | null
    rendaFamiliar: number | null
    membros: number | null
    status: string | null
  }

  export type FamiliaBaixaRendaMaxAggregateOutputType = {
    id: number | null
    chefeFamiliaCPF: string | null
    nomeChefe: string | null
    rendaFamiliar: number | null
    membros: number | null
    status: string | null
  }

  export type FamiliaBaixaRendaCountAggregateOutputType = {
    id: number
    chefeFamiliaCPF: number
    nomeChefe: number
    rendaFamiliar: number
    membros: number
    status: number
    _all: number
  }


  export type FamiliaBaixaRendaAvgAggregateInputType = {
    id?: true
    rendaFamiliar?: true
    membros?: true
  }

  export type FamiliaBaixaRendaSumAggregateInputType = {
    id?: true
    rendaFamiliar?: true
    membros?: true
  }

  export type FamiliaBaixaRendaMinAggregateInputType = {
    id?: true
    chefeFamiliaCPF?: true
    nomeChefe?: true
    rendaFamiliar?: true
    membros?: true
    status?: true
  }

  export type FamiliaBaixaRendaMaxAggregateInputType = {
    id?: true
    chefeFamiliaCPF?: true
    nomeChefe?: true
    rendaFamiliar?: true
    membros?: true
    status?: true
  }

  export type FamiliaBaixaRendaCountAggregateInputType = {
    id?: true
    chefeFamiliaCPF?: true
    nomeChefe?: true
    rendaFamiliar?: true
    membros?: true
    status?: true
    _all?: true
  }

  export type FamiliaBaixaRendaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamiliaBaixaRenda to aggregate.
     */
    where?: FamiliaBaixaRendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamiliaBaixaRendas to fetch.
     */
    orderBy?: FamiliaBaixaRendaOrderByWithRelationInput | FamiliaBaixaRendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FamiliaBaixaRendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamiliaBaixaRendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamiliaBaixaRendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FamiliaBaixaRendas
    **/
    _count?: true | FamiliaBaixaRendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FamiliaBaixaRendaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FamiliaBaixaRendaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FamiliaBaixaRendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FamiliaBaixaRendaMaxAggregateInputType
  }

  export type GetFamiliaBaixaRendaAggregateType<T extends FamiliaBaixaRendaAggregateArgs> = {
        [P in keyof T & keyof AggregateFamiliaBaixaRenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFamiliaBaixaRenda[P]>
      : GetScalarType<T[P], AggregateFamiliaBaixaRenda[P]>
  }




  export type FamiliaBaixaRendaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamiliaBaixaRendaWhereInput
    orderBy?: FamiliaBaixaRendaOrderByWithAggregationInput | FamiliaBaixaRendaOrderByWithAggregationInput[]
    by: FamiliaBaixaRendaScalarFieldEnum[] | FamiliaBaixaRendaScalarFieldEnum
    having?: FamiliaBaixaRendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FamiliaBaixaRendaCountAggregateInputType | true
    _avg?: FamiliaBaixaRendaAvgAggregateInputType
    _sum?: FamiliaBaixaRendaSumAggregateInputType
    _min?: FamiliaBaixaRendaMinAggregateInputType
    _max?: FamiliaBaixaRendaMaxAggregateInputType
  }

  export type FamiliaBaixaRendaGroupByOutputType = {
    id: number
    chefeFamiliaCPF: string
    nomeChefe: string
    rendaFamiliar: number
    membros: number
    status: string
    _count: FamiliaBaixaRendaCountAggregateOutputType | null
    _avg: FamiliaBaixaRendaAvgAggregateOutputType | null
    _sum: FamiliaBaixaRendaSumAggregateOutputType | null
    _min: FamiliaBaixaRendaMinAggregateOutputType | null
    _max: FamiliaBaixaRendaMaxAggregateOutputType | null
  }

  type GetFamiliaBaixaRendaGroupByPayload<T extends FamiliaBaixaRendaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FamiliaBaixaRendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FamiliaBaixaRendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FamiliaBaixaRendaGroupByOutputType[P]>
            : GetScalarType<T[P], FamiliaBaixaRendaGroupByOutputType[P]>
        }
      >
    >


  export type FamiliaBaixaRendaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chefeFamiliaCPF?: boolean
    nomeChefe?: boolean
    rendaFamiliar?: boolean
    membros?: boolean
    status?: boolean
  }, ExtArgs["result"]["familiaBaixaRenda"]>

  export type FamiliaBaixaRendaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chefeFamiliaCPF?: boolean
    nomeChefe?: boolean
    rendaFamiliar?: boolean
    membros?: boolean
    status?: boolean
  }, ExtArgs["result"]["familiaBaixaRenda"]>

  export type FamiliaBaixaRendaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chefeFamiliaCPF?: boolean
    nomeChefe?: boolean
    rendaFamiliar?: boolean
    membros?: boolean
    status?: boolean
  }, ExtArgs["result"]["familiaBaixaRenda"]>

  export type FamiliaBaixaRendaSelectScalar = {
    id?: boolean
    chefeFamiliaCPF?: boolean
    nomeChefe?: boolean
    rendaFamiliar?: boolean
    membros?: boolean
    status?: boolean
  }

  export type FamiliaBaixaRendaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chefeFamiliaCPF" | "nomeChefe" | "rendaFamiliar" | "membros" | "status", ExtArgs["result"]["familiaBaixaRenda"]>

  export type $FamiliaBaixaRendaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FamiliaBaixaRenda"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      chefeFamiliaCPF: string
      nomeChefe: string
      rendaFamiliar: number
      membros: number
      status: string
    }, ExtArgs["result"]["familiaBaixaRenda"]>
    composites: {}
  }

  type FamiliaBaixaRendaGetPayload<S extends boolean | null | undefined | FamiliaBaixaRendaDefaultArgs> = $Result.GetResult<Prisma.$FamiliaBaixaRendaPayload, S>

  type FamiliaBaixaRendaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FamiliaBaixaRendaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FamiliaBaixaRendaCountAggregateInputType | true
    }

  export interface FamiliaBaixaRendaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FamiliaBaixaRenda'], meta: { name: 'FamiliaBaixaRenda' } }
    /**
     * Find zero or one FamiliaBaixaRenda that matches the filter.
     * @param {FamiliaBaixaRendaFindUniqueArgs} args - Arguments to find a FamiliaBaixaRenda
     * @example
     * // Get one FamiliaBaixaRenda
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FamiliaBaixaRendaFindUniqueArgs>(args: SelectSubset<T, FamiliaBaixaRendaFindUniqueArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FamiliaBaixaRenda that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FamiliaBaixaRendaFindUniqueOrThrowArgs} args - Arguments to find a FamiliaBaixaRenda
     * @example
     * // Get one FamiliaBaixaRenda
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FamiliaBaixaRendaFindUniqueOrThrowArgs>(args: SelectSubset<T, FamiliaBaixaRendaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FamiliaBaixaRenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamiliaBaixaRendaFindFirstArgs} args - Arguments to find a FamiliaBaixaRenda
     * @example
     * // Get one FamiliaBaixaRenda
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FamiliaBaixaRendaFindFirstArgs>(args?: SelectSubset<T, FamiliaBaixaRendaFindFirstArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FamiliaBaixaRenda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamiliaBaixaRendaFindFirstOrThrowArgs} args - Arguments to find a FamiliaBaixaRenda
     * @example
     * // Get one FamiliaBaixaRenda
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FamiliaBaixaRendaFindFirstOrThrowArgs>(args?: SelectSubset<T, FamiliaBaixaRendaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FamiliaBaixaRendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamiliaBaixaRendaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FamiliaBaixaRendas
     * const familiaBaixaRendas = await prisma.familiaBaixaRenda.findMany()
     * 
     * // Get first 10 FamiliaBaixaRendas
     * const familiaBaixaRendas = await prisma.familiaBaixaRenda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const familiaBaixaRendaWithIdOnly = await prisma.familiaBaixaRenda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FamiliaBaixaRendaFindManyArgs>(args?: SelectSubset<T, FamiliaBaixaRendaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FamiliaBaixaRenda.
     * @param {FamiliaBaixaRendaCreateArgs} args - Arguments to create a FamiliaBaixaRenda.
     * @example
     * // Create one FamiliaBaixaRenda
     * const FamiliaBaixaRenda = await prisma.familiaBaixaRenda.create({
     *   data: {
     *     // ... data to create a FamiliaBaixaRenda
     *   }
     * })
     * 
     */
    create<T extends FamiliaBaixaRendaCreateArgs>(args: SelectSubset<T, FamiliaBaixaRendaCreateArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FamiliaBaixaRendas.
     * @param {FamiliaBaixaRendaCreateManyArgs} args - Arguments to create many FamiliaBaixaRendas.
     * @example
     * // Create many FamiliaBaixaRendas
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FamiliaBaixaRendaCreateManyArgs>(args?: SelectSubset<T, FamiliaBaixaRendaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FamiliaBaixaRendas and returns the data saved in the database.
     * @param {FamiliaBaixaRendaCreateManyAndReturnArgs} args - Arguments to create many FamiliaBaixaRendas.
     * @example
     * // Create many FamiliaBaixaRendas
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FamiliaBaixaRendas and only return the `id`
     * const familiaBaixaRendaWithIdOnly = await prisma.familiaBaixaRenda.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FamiliaBaixaRendaCreateManyAndReturnArgs>(args?: SelectSubset<T, FamiliaBaixaRendaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FamiliaBaixaRenda.
     * @param {FamiliaBaixaRendaDeleteArgs} args - Arguments to delete one FamiliaBaixaRenda.
     * @example
     * // Delete one FamiliaBaixaRenda
     * const FamiliaBaixaRenda = await prisma.familiaBaixaRenda.delete({
     *   where: {
     *     // ... filter to delete one FamiliaBaixaRenda
     *   }
     * })
     * 
     */
    delete<T extends FamiliaBaixaRendaDeleteArgs>(args: SelectSubset<T, FamiliaBaixaRendaDeleteArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FamiliaBaixaRenda.
     * @param {FamiliaBaixaRendaUpdateArgs} args - Arguments to update one FamiliaBaixaRenda.
     * @example
     * // Update one FamiliaBaixaRenda
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FamiliaBaixaRendaUpdateArgs>(args: SelectSubset<T, FamiliaBaixaRendaUpdateArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FamiliaBaixaRendas.
     * @param {FamiliaBaixaRendaDeleteManyArgs} args - Arguments to filter FamiliaBaixaRendas to delete.
     * @example
     * // Delete a few FamiliaBaixaRendas
     * const { count } = await prisma.familiaBaixaRenda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FamiliaBaixaRendaDeleteManyArgs>(args?: SelectSubset<T, FamiliaBaixaRendaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FamiliaBaixaRendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamiliaBaixaRendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FamiliaBaixaRendas
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FamiliaBaixaRendaUpdateManyArgs>(args: SelectSubset<T, FamiliaBaixaRendaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FamiliaBaixaRendas and returns the data updated in the database.
     * @param {FamiliaBaixaRendaUpdateManyAndReturnArgs} args - Arguments to update many FamiliaBaixaRendas.
     * @example
     * // Update many FamiliaBaixaRendas
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FamiliaBaixaRendas and only return the `id`
     * const familiaBaixaRendaWithIdOnly = await prisma.familiaBaixaRenda.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FamiliaBaixaRendaUpdateManyAndReturnArgs>(args: SelectSubset<T, FamiliaBaixaRendaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FamiliaBaixaRenda.
     * @param {FamiliaBaixaRendaUpsertArgs} args - Arguments to update or create a FamiliaBaixaRenda.
     * @example
     * // Update or create a FamiliaBaixaRenda
     * const familiaBaixaRenda = await prisma.familiaBaixaRenda.upsert({
     *   create: {
     *     // ... data to create a FamiliaBaixaRenda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FamiliaBaixaRenda we want to update
     *   }
     * })
     */
    upsert<T extends FamiliaBaixaRendaUpsertArgs>(args: SelectSubset<T, FamiliaBaixaRendaUpsertArgs<ExtArgs>>): Prisma__FamiliaBaixaRendaClient<$Result.GetResult<Prisma.$FamiliaBaixaRendaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FamiliaBaixaRendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamiliaBaixaRendaCountArgs} args - Arguments to filter FamiliaBaixaRendas to count.
     * @example
     * // Count the number of FamiliaBaixaRendas
     * const count = await prisma.familiaBaixaRenda.count({
     *   where: {
     *     // ... the filter for the FamiliaBaixaRendas we want to count
     *   }
     * })
    **/
    count<T extends FamiliaBaixaRendaCountArgs>(
      args?: Subset<T, FamiliaBaixaRendaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FamiliaBaixaRendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FamiliaBaixaRenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamiliaBaixaRendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FamiliaBaixaRendaAggregateArgs>(args: Subset<T, FamiliaBaixaRendaAggregateArgs>): Prisma.PrismaPromise<GetFamiliaBaixaRendaAggregateType<T>>

    /**
     * Group by FamiliaBaixaRenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamiliaBaixaRendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FamiliaBaixaRendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FamiliaBaixaRendaGroupByArgs['orderBy'] }
        : { orderBy?: FamiliaBaixaRendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FamiliaBaixaRendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFamiliaBaixaRendaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FamiliaBaixaRenda model
   */
  readonly fields: FamiliaBaixaRendaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FamiliaBaixaRenda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FamiliaBaixaRendaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FamiliaBaixaRenda model
   */
  interface FamiliaBaixaRendaFieldRefs {
    readonly id: FieldRef<"FamiliaBaixaRenda", 'Int'>
    readonly chefeFamiliaCPF: FieldRef<"FamiliaBaixaRenda", 'String'>
    readonly nomeChefe: FieldRef<"FamiliaBaixaRenda", 'String'>
    readonly rendaFamiliar: FieldRef<"FamiliaBaixaRenda", 'Float'>
    readonly membros: FieldRef<"FamiliaBaixaRenda", 'Int'>
    readonly status: FieldRef<"FamiliaBaixaRenda", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FamiliaBaixaRenda findUnique
   */
  export type FamiliaBaixaRendaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * Filter, which FamiliaBaixaRenda to fetch.
     */
    where: FamiliaBaixaRendaWhereUniqueInput
  }

  /**
   * FamiliaBaixaRenda findUniqueOrThrow
   */
  export type FamiliaBaixaRendaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * Filter, which FamiliaBaixaRenda to fetch.
     */
    where: FamiliaBaixaRendaWhereUniqueInput
  }

  /**
   * FamiliaBaixaRenda findFirst
   */
  export type FamiliaBaixaRendaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * Filter, which FamiliaBaixaRenda to fetch.
     */
    where?: FamiliaBaixaRendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamiliaBaixaRendas to fetch.
     */
    orderBy?: FamiliaBaixaRendaOrderByWithRelationInput | FamiliaBaixaRendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamiliaBaixaRendas.
     */
    cursor?: FamiliaBaixaRendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamiliaBaixaRendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamiliaBaixaRendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamiliaBaixaRendas.
     */
    distinct?: FamiliaBaixaRendaScalarFieldEnum | FamiliaBaixaRendaScalarFieldEnum[]
  }

  /**
   * FamiliaBaixaRenda findFirstOrThrow
   */
  export type FamiliaBaixaRendaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * Filter, which FamiliaBaixaRenda to fetch.
     */
    where?: FamiliaBaixaRendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamiliaBaixaRendas to fetch.
     */
    orderBy?: FamiliaBaixaRendaOrderByWithRelationInput | FamiliaBaixaRendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamiliaBaixaRendas.
     */
    cursor?: FamiliaBaixaRendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamiliaBaixaRendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamiliaBaixaRendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamiliaBaixaRendas.
     */
    distinct?: FamiliaBaixaRendaScalarFieldEnum | FamiliaBaixaRendaScalarFieldEnum[]
  }

  /**
   * FamiliaBaixaRenda findMany
   */
  export type FamiliaBaixaRendaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * Filter, which FamiliaBaixaRendas to fetch.
     */
    where?: FamiliaBaixaRendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamiliaBaixaRendas to fetch.
     */
    orderBy?: FamiliaBaixaRendaOrderByWithRelationInput | FamiliaBaixaRendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FamiliaBaixaRendas.
     */
    cursor?: FamiliaBaixaRendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamiliaBaixaRendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamiliaBaixaRendas.
     */
    skip?: number
    distinct?: FamiliaBaixaRendaScalarFieldEnum | FamiliaBaixaRendaScalarFieldEnum[]
  }

  /**
   * FamiliaBaixaRenda create
   */
  export type FamiliaBaixaRendaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * The data needed to create a FamiliaBaixaRenda.
     */
    data: XOR<FamiliaBaixaRendaCreateInput, FamiliaBaixaRendaUncheckedCreateInput>
  }

  /**
   * FamiliaBaixaRenda createMany
   */
  export type FamiliaBaixaRendaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FamiliaBaixaRendas.
     */
    data: FamiliaBaixaRendaCreateManyInput | FamiliaBaixaRendaCreateManyInput[]
  }

  /**
   * FamiliaBaixaRenda createManyAndReturn
   */
  export type FamiliaBaixaRendaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * The data used to create many FamiliaBaixaRendas.
     */
    data: FamiliaBaixaRendaCreateManyInput | FamiliaBaixaRendaCreateManyInput[]
  }

  /**
   * FamiliaBaixaRenda update
   */
  export type FamiliaBaixaRendaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * The data needed to update a FamiliaBaixaRenda.
     */
    data: XOR<FamiliaBaixaRendaUpdateInput, FamiliaBaixaRendaUncheckedUpdateInput>
    /**
     * Choose, which FamiliaBaixaRenda to update.
     */
    where: FamiliaBaixaRendaWhereUniqueInput
  }

  /**
   * FamiliaBaixaRenda updateMany
   */
  export type FamiliaBaixaRendaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FamiliaBaixaRendas.
     */
    data: XOR<FamiliaBaixaRendaUpdateManyMutationInput, FamiliaBaixaRendaUncheckedUpdateManyInput>
    /**
     * Filter which FamiliaBaixaRendas to update
     */
    where?: FamiliaBaixaRendaWhereInput
    /**
     * Limit how many FamiliaBaixaRendas to update.
     */
    limit?: number
  }

  /**
   * FamiliaBaixaRenda updateManyAndReturn
   */
  export type FamiliaBaixaRendaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * The data used to update FamiliaBaixaRendas.
     */
    data: XOR<FamiliaBaixaRendaUpdateManyMutationInput, FamiliaBaixaRendaUncheckedUpdateManyInput>
    /**
     * Filter which FamiliaBaixaRendas to update
     */
    where?: FamiliaBaixaRendaWhereInput
    /**
     * Limit how many FamiliaBaixaRendas to update.
     */
    limit?: number
  }

  /**
   * FamiliaBaixaRenda upsert
   */
  export type FamiliaBaixaRendaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * The filter to search for the FamiliaBaixaRenda to update in case it exists.
     */
    where: FamiliaBaixaRendaWhereUniqueInput
    /**
     * In case the FamiliaBaixaRenda found by the `where` argument doesn't exist, create a new FamiliaBaixaRenda with this data.
     */
    create: XOR<FamiliaBaixaRendaCreateInput, FamiliaBaixaRendaUncheckedCreateInput>
    /**
     * In case the FamiliaBaixaRenda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FamiliaBaixaRendaUpdateInput, FamiliaBaixaRendaUncheckedUpdateInput>
  }

  /**
   * FamiliaBaixaRenda delete
   */
  export type FamiliaBaixaRendaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
    /**
     * Filter which FamiliaBaixaRenda to delete.
     */
    where: FamiliaBaixaRendaWhereUniqueInput
  }

  /**
   * FamiliaBaixaRenda deleteMany
   */
  export type FamiliaBaixaRendaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamiliaBaixaRendas to delete
     */
    where?: FamiliaBaixaRendaWhereInput
    /**
     * Limit how many FamiliaBaixaRendas to delete.
     */
    limit?: number
  }

  /**
   * FamiliaBaixaRenda without action
   */
  export type FamiliaBaixaRendaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamiliaBaixaRenda
     */
    select?: FamiliaBaixaRendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamiliaBaixaRenda
     */
    omit?: FamiliaBaixaRendaOmit<ExtArgs> | null
  }


  /**
   * Model CadUnico
   */

  export type AggregateCadUnico = {
    _count: CadUnicoCountAggregateOutputType | null
    _avg: CadUnicoAvgAggregateOutputType | null
    _sum: CadUnicoSumAggregateOutputType | null
    _min: CadUnicoMinAggregateOutputType | null
    _max: CadUnicoMaxAggregateOutputType | null
  }

  export type CadUnicoAvgAggregateOutputType = {
    id: number | null
  }

  export type CadUnicoSumAggregateOutputType = {
    id: number | null
  }

  export type CadUnicoMinAggregateOutputType = {
    id: number | null
    cpf: string | null
    nis: string | null
    situacao: string | null
    ultimaAtualizacao: Date | null
  }

  export type CadUnicoMaxAggregateOutputType = {
    id: number | null
    cpf: string | null
    nis: string | null
    situacao: string | null
    ultimaAtualizacao: Date | null
  }

  export type CadUnicoCountAggregateOutputType = {
    id: number
    cpf: number
    nis: number
    situacao: number
    ultimaAtualizacao: number
    _all: number
  }


  export type CadUnicoAvgAggregateInputType = {
    id?: true
  }

  export type CadUnicoSumAggregateInputType = {
    id?: true
  }

  export type CadUnicoMinAggregateInputType = {
    id?: true
    cpf?: true
    nis?: true
    situacao?: true
    ultimaAtualizacao?: true
  }

  export type CadUnicoMaxAggregateInputType = {
    id?: true
    cpf?: true
    nis?: true
    situacao?: true
    ultimaAtualizacao?: true
  }

  export type CadUnicoCountAggregateInputType = {
    id?: true
    cpf?: true
    nis?: true
    situacao?: true
    ultimaAtualizacao?: true
    _all?: true
  }

  export type CadUnicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CadUnico to aggregate.
     */
    where?: CadUnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CadUnicos to fetch.
     */
    orderBy?: CadUnicoOrderByWithRelationInput | CadUnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CadUnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CadUnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CadUnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CadUnicos
    **/
    _count?: true | CadUnicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CadUnicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CadUnicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CadUnicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CadUnicoMaxAggregateInputType
  }

  export type GetCadUnicoAggregateType<T extends CadUnicoAggregateArgs> = {
        [P in keyof T & keyof AggregateCadUnico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadUnico[P]>
      : GetScalarType<T[P], AggregateCadUnico[P]>
  }




  export type CadUnicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CadUnicoWhereInput
    orderBy?: CadUnicoOrderByWithAggregationInput | CadUnicoOrderByWithAggregationInput[]
    by: CadUnicoScalarFieldEnum[] | CadUnicoScalarFieldEnum
    having?: CadUnicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CadUnicoCountAggregateInputType | true
    _avg?: CadUnicoAvgAggregateInputType
    _sum?: CadUnicoSumAggregateInputType
    _min?: CadUnicoMinAggregateInputType
    _max?: CadUnicoMaxAggregateInputType
  }

  export type CadUnicoGroupByOutputType = {
    id: number
    cpf: string
    nis: string
    situacao: string
    ultimaAtualizacao: Date
    _count: CadUnicoCountAggregateOutputType | null
    _avg: CadUnicoAvgAggregateOutputType | null
    _sum: CadUnicoSumAggregateOutputType | null
    _min: CadUnicoMinAggregateOutputType | null
    _max: CadUnicoMaxAggregateOutputType | null
  }

  type GetCadUnicoGroupByPayload<T extends CadUnicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CadUnicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CadUnicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CadUnicoGroupByOutputType[P]>
            : GetScalarType<T[P], CadUnicoGroupByOutputType[P]>
        }
      >
    >


  export type CadUnicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    nis?: boolean
    situacao?: boolean
    ultimaAtualizacao?: boolean
  }, ExtArgs["result"]["cadUnico"]>

  export type CadUnicoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    nis?: boolean
    situacao?: boolean
    ultimaAtualizacao?: boolean
  }, ExtArgs["result"]["cadUnico"]>

  export type CadUnicoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    nis?: boolean
    situacao?: boolean
    ultimaAtualizacao?: boolean
  }, ExtArgs["result"]["cadUnico"]>

  export type CadUnicoSelectScalar = {
    id?: boolean
    cpf?: boolean
    nis?: boolean
    situacao?: boolean
    ultimaAtualizacao?: boolean
  }

  export type CadUnicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cpf" | "nis" | "situacao" | "ultimaAtualizacao", ExtArgs["result"]["cadUnico"]>

  export type $CadUnicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CadUnico"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cpf: string
      nis: string
      situacao: string
      ultimaAtualizacao: Date
    }, ExtArgs["result"]["cadUnico"]>
    composites: {}
  }

  type CadUnicoGetPayload<S extends boolean | null | undefined | CadUnicoDefaultArgs> = $Result.GetResult<Prisma.$CadUnicoPayload, S>

  type CadUnicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CadUnicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CadUnicoCountAggregateInputType | true
    }

  export interface CadUnicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CadUnico'], meta: { name: 'CadUnico' } }
    /**
     * Find zero or one CadUnico that matches the filter.
     * @param {CadUnicoFindUniqueArgs} args - Arguments to find a CadUnico
     * @example
     * // Get one CadUnico
     * const cadUnico = await prisma.cadUnico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CadUnicoFindUniqueArgs>(args: SelectSubset<T, CadUnicoFindUniqueArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CadUnico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CadUnicoFindUniqueOrThrowArgs} args - Arguments to find a CadUnico
     * @example
     * // Get one CadUnico
     * const cadUnico = await prisma.cadUnico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CadUnicoFindUniqueOrThrowArgs>(args: SelectSubset<T, CadUnicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CadUnico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadUnicoFindFirstArgs} args - Arguments to find a CadUnico
     * @example
     * // Get one CadUnico
     * const cadUnico = await prisma.cadUnico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CadUnicoFindFirstArgs>(args?: SelectSubset<T, CadUnicoFindFirstArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CadUnico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadUnicoFindFirstOrThrowArgs} args - Arguments to find a CadUnico
     * @example
     * // Get one CadUnico
     * const cadUnico = await prisma.cadUnico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CadUnicoFindFirstOrThrowArgs>(args?: SelectSubset<T, CadUnicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CadUnicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadUnicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CadUnicos
     * const cadUnicos = await prisma.cadUnico.findMany()
     * 
     * // Get first 10 CadUnicos
     * const cadUnicos = await prisma.cadUnico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadUnicoWithIdOnly = await prisma.cadUnico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CadUnicoFindManyArgs>(args?: SelectSubset<T, CadUnicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CadUnico.
     * @param {CadUnicoCreateArgs} args - Arguments to create a CadUnico.
     * @example
     * // Create one CadUnico
     * const CadUnico = await prisma.cadUnico.create({
     *   data: {
     *     // ... data to create a CadUnico
     *   }
     * })
     * 
     */
    create<T extends CadUnicoCreateArgs>(args: SelectSubset<T, CadUnicoCreateArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CadUnicos.
     * @param {CadUnicoCreateManyArgs} args - Arguments to create many CadUnicos.
     * @example
     * // Create many CadUnicos
     * const cadUnico = await prisma.cadUnico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CadUnicoCreateManyArgs>(args?: SelectSubset<T, CadUnicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CadUnicos and returns the data saved in the database.
     * @param {CadUnicoCreateManyAndReturnArgs} args - Arguments to create many CadUnicos.
     * @example
     * // Create many CadUnicos
     * const cadUnico = await prisma.cadUnico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CadUnicos and only return the `id`
     * const cadUnicoWithIdOnly = await prisma.cadUnico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CadUnicoCreateManyAndReturnArgs>(args?: SelectSubset<T, CadUnicoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CadUnico.
     * @param {CadUnicoDeleteArgs} args - Arguments to delete one CadUnico.
     * @example
     * // Delete one CadUnico
     * const CadUnico = await prisma.cadUnico.delete({
     *   where: {
     *     // ... filter to delete one CadUnico
     *   }
     * })
     * 
     */
    delete<T extends CadUnicoDeleteArgs>(args: SelectSubset<T, CadUnicoDeleteArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CadUnico.
     * @param {CadUnicoUpdateArgs} args - Arguments to update one CadUnico.
     * @example
     * // Update one CadUnico
     * const cadUnico = await prisma.cadUnico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CadUnicoUpdateArgs>(args: SelectSubset<T, CadUnicoUpdateArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CadUnicos.
     * @param {CadUnicoDeleteManyArgs} args - Arguments to filter CadUnicos to delete.
     * @example
     * // Delete a few CadUnicos
     * const { count } = await prisma.cadUnico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CadUnicoDeleteManyArgs>(args?: SelectSubset<T, CadUnicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CadUnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadUnicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CadUnicos
     * const cadUnico = await prisma.cadUnico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CadUnicoUpdateManyArgs>(args: SelectSubset<T, CadUnicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CadUnicos and returns the data updated in the database.
     * @param {CadUnicoUpdateManyAndReturnArgs} args - Arguments to update many CadUnicos.
     * @example
     * // Update many CadUnicos
     * const cadUnico = await prisma.cadUnico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CadUnicos and only return the `id`
     * const cadUnicoWithIdOnly = await prisma.cadUnico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CadUnicoUpdateManyAndReturnArgs>(args: SelectSubset<T, CadUnicoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CadUnico.
     * @param {CadUnicoUpsertArgs} args - Arguments to update or create a CadUnico.
     * @example
     * // Update or create a CadUnico
     * const cadUnico = await prisma.cadUnico.upsert({
     *   create: {
     *     // ... data to create a CadUnico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CadUnico we want to update
     *   }
     * })
     */
    upsert<T extends CadUnicoUpsertArgs>(args: SelectSubset<T, CadUnicoUpsertArgs<ExtArgs>>): Prisma__CadUnicoClient<$Result.GetResult<Prisma.$CadUnicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CadUnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadUnicoCountArgs} args - Arguments to filter CadUnicos to count.
     * @example
     * // Count the number of CadUnicos
     * const count = await prisma.cadUnico.count({
     *   where: {
     *     // ... the filter for the CadUnicos we want to count
     *   }
     * })
    **/
    count<T extends CadUnicoCountArgs>(
      args?: Subset<T, CadUnicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CadUnicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CadUnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadUnicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CadUnicoAggregateArgs>(args: Subset<T, CadUnicoAggregateArgs>): Prisma.PrismaPromise<GetCadUnicoAggregateType<T>>

    /**
     * Group by CadUnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CadUnicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CadUnicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CadUnicoGroupByArgs['orderBy'] }
        : { orderBy?: CadUnicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CadUnicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadUnicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CadUnico model
   */
  readonly fields: CadUnicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CadUnico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CadUnicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CadUnico model
   */
  interface CadUnicoFieldRefs {
    readonly id: FieldRef<"CadUnico", 'Int'>
    readonly cpf: FieldRef<"CadUnico", 'String'>
    readonly nis: FieldRef<"CadUnico", 'String'>
    readonly situacao: FieldRef<"CadUnico", 'String'>
    readonly ultimaAtualizacao: FieldRef<"CadUnico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CadUnico findUnique
   */
  export type CadUnicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * Filter, which CadUnico to fetch.
     */
    where: CadUnicoWhereUniqueInput
  }

  /**
   * CadUnico findUniqueOrThrow
   */
  export type CadUnicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * Filter, which CadUnico to fetch.
     */
    where: CadUnicoWhereUniqueInput
  }

  /**
   * CadUnico findFirst
   */
  export type CadUnicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * Filter, which CadUnico to fetch.
     */
    where?: CadUnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CadUnicos to fetch.
     */
    orderBy?: CadUnicoOrderByWithRelationInput | CadUnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CadUnicos.
     */
    cursor?: CadUnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CadUnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CadUnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CadUnicos.
     */
    distinct?: CadUnicoScalarFieldEnum | CadUnicoScalarFieldEnum[]
  }

  /**
   * CadUnico findFirstOrThrow
   */
  export type CadUnicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * Filter, which CadUnico to fetch.
     */
    where?: CadUnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CadUnicos to fetch.
     */
    orderBy?: CadUnicoOrderByWithRelationInput | CadUnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CadUnicos.
     */
    cursor?: CadUnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CadUnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CadUnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CadUnicos.
     */
    distinct?: CadUnicoScalarFieldEnum | CadUnicoScalarFieldEnum[]
  }

  /**
   * CadUnico findMany
   */
  export type CadUnicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * Filter, which CadUnicos to fetch.
     */
    where?: CadUnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CadUnicos to fetch.
     */
    orderBy?: CadUnicoOrderByWithRelationInput | CadUnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CadUnicos.
     */
    cursor?: CadUnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CadUnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CadUnicos.
     */
    skip?: number
    distinct?: CadUnicoScalarFieldEnum | CadUnicoScalarFieldEnum[]
  }

  /**
   * CadUnico create
   */
  export type CadUnicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * The data needed to create a CadUnico.
     */
    data: XOR<CadUnicoCreateInput, CadUnicoUncheckedCreateInput>
  }

  /**
   * CadUnico createMany
   */
  export type CadUnicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CadUnicos.
     */
    data: CadUnicoCreateManyInput | CadUnicoCreateManyInput[]
  }

  /**
   * CadUnico createManyAndReturn
   */
  export type CadUnicoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * The data used to create many CadUnicos.
     */
    data: CadUnicoCreateManyInput | CadUnicoCreateManyInput[]
  }

  /**
   * CadUnico update
   */
  export type CadUnicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * The data needed to update a CadUnico.
     */
    data: XOR<CadUnicoUpdateInput, CadUnicoUncheckedUpdateInput>
    /**
     * Choose, which CadUnico to update.
     */
    where: CadUnicoWhereUniqueInput
  }

  /**
   * CadUnico updateMany
   */
  export type CadUnicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CadUnicos.
     */
    data: XOR<CadUnicoUpdateManyMutationInput, CadUnicoUncheckedUpdateManyInput>
    /**
     * Filter which CadUnicos to update
     */
    where?: CadUnicoWhereInput
    /**
     * Limit how many CadUnicos to update.
     */
    limit?: number
  }

  /**
   * CadUnico updateManyAndReturn
   */
  export type CadUnicoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * The data used to update CadUnicos.
     */
    data: XOR<CadUnicoUpdateManyMutationInput, CadUnicoUncheckedUpdateManyInput>
    /**
     * Filter which CadUnicos to update
     */
    where?: CadUnicoWhereInput
    /**
     * Limit how many CadUnicos to update.
     */
    limit?: number
  }

  /**
   * CadUnico upsert
   */
  export type CadUnicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * The filter to search for the CadUnico to update in case it exists.
     */
    where: CadUnicoWhereUniqueInput
    /**
     * In case the CadUnico found by the `where` argument doesn't exist, create a new CadUnico with this data.
     */
    create: XOR<CadUnicoCreateInput, CadUnicoUncheckedCreateInput>
    /**
     * In case the CadUnico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CadUnicoUpdateInput, CadUnicoUncheckedUpdateInput>
  }

  /**
   * CadUnico delete
   */
  export type CadUnicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
    /**
     * Filter which CadUnico to delete.
     */
    where: CadUnicoWhereUniqueInput
  }

  /**
   * CadUnico deleteMany
   */
  export type CadUnicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CadUnicos to delete
     */
    where?: CadUnicoWhereInput
    /**
     * Limit how many CadUnicos to delete.
     */
    limit?: number
  }

  /**
   * CadUnico without action
   */
  export type CadUnicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CadUnico
     */
    select?: CadUnicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CadUnico
     */
    omit?: CadUnicoOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    cpf: 'cpf',
    senha: 'senha',
    nome: 'nome',
    tipo: 'tipo'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FamiliaBaixaRendaScalarFieldEnum: {
    id: 'id',
    chefeFamiliaCPF: 'chefeFamiliaCPF',
    nomeChefe: 'nomeChefe',
    rendaFamiliar: 'rendaFamiliar',
    membros: 'membros',
    status: 'status'
  };

  export type FamiliaBaixaRendaScalarFieldEnum = (typeof FamiliaBaixaRendaScalarFieldEnum)[keyof typeof FamiliaBaixaRendaScalarFieldEnum]


  export const CadUnicoScalarFieldEnum: {
    id: 'id',
    cpf: 'cpf',
    nis: 'nis',
    situacao: 'situacao',
    ultimaAtualizacao: 'ultimaAtualizacao'
  };

  export type CadUnicoScalarFieldEnum = (typeof CadUnicoScalarFieldEnum)[keyof typeof CadUnicoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    cpf?: StringFilter<"User"> | string
    senha?: StringFilter<"User"> | string
    nome?: StringFilter<"User"> | string
    tipo?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    senha?: StringFilter<"User"> | string
    nome?: StringFilter<"User"> | string
    tipo?: StringFilter<"User"> | string
  }, "id" | "cpf">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    cpf?: StringWithAggregatesFilter<"User"> | string
    senha?: StringWithAggregatesFilter<"User"> | string
    nome?: StringWithAggregatesFilter<"User"> | string
    tipo?: StringWithAggregatesFilter<"User"> | string
  }

  export type FamiliaBaixaRendaWhereInput = {
    AND?: FamiliaBaixaRendaWhereInput | FamiliaBaixaRendaWhereInput[]
    OR?: FamiliaBaixaRendaWhereInput[]
    NOT?: FamiliaBaixaRendaWhereInput | FamiliaBaixaRendaWhereInput[]
    id?: IntFilter<"FamiliaBaixaRenda"> | number
    chefeFamiliaCPF?: StringFilter<"FamiliaBaixaRenda"> | string
    nomeChefe?: StringFilter<"FamiliaBaixaRenda"> | string
    rendaFamiliar?: FloatFilter<"FamiliaBaixaRenda"> | number
    membros?: IntFilter<"FamiliaBaixaRenda"> | number
    status?: StringFilter<"FamiliaBaixaRenda"> | string
  }

  export type FamiliaBaixaRendaOrderByWithRelationInput = {
    id?: SortOrder
    chefeFamiliaCPF?: SortOrder
    nomeChefe?: SortOrder
    rendaFamiliar?: SortOrder
    membros?: SortOrder
    status?: SortOrder
  }

  export type FamiliaBaixaRendaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    chefeFamiliaCPF?: string
    AND?: FamiliaBaixaRendaWhereInput | FamiliaBaixaRendaWhereInput[]
    OR?: FamiliaBaixaRendaWhereInput[]
    NOT?: FamiliaBaixaRendaWhereInput | FamiliaBaixaRendaWhereInput[]
    nomeChefe?: StringFilter<"FamiliaBaixaRenda"> | string
    rendaFamiliar?: FloatFilter<"FamiliaBaixaRenda"> | number
    membros?: IntFilter<"FamiliaBaixaRenda"> | number
    status?: StringFilter<"FamiliaBaixaRenda"> | string
  }, "id" | "chefeFamiliaCPF">

  export type FamiliaBaixaRendaOrderByWithAggregationInput = {
    id?: SortOrder
    chefeFamiliaCPF?: SortOrder
    nomeChefe?: SortOrder
    rendaFamiliar?: SortOrder
    membros?: SortOrder
    status?: SortOrder
    _count?: FamiliaBaixaRendaCountOrderByAggregateInput
    _avg?: FamiliaBaixaRendaAvgOrderByAggregateInput
    _max?: FamiliaBaixaRendaMaxOrderByAggregateInput
    _min?: FamiliaBaixaRendaMinOrderByAggregateInput
    _sum?: FamiliaBaixaRendaSumOrderByAggregateInput
  }

  export type FamiliaBaixaRendaScalarWhereWithAggregatesInput = {
    AND?: FamiliaBaixaRendaScalarWhereWithAggregatesInput | FamiliaBaixaRendaScalarWhereWithAggregatesInput[]
    OR?: FamiliaBaixaRendaScalarWhereWithAggregatesInput[]
    NOT?: FamiliaBaixaRendaScalarWhereWithAggregatesInput | FamiliaBaixaRendaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FamiliaBaixaRenda"> | number
    chefeFamiliaCPF?: StringWithAggregatesFilter<"FamiliaBaixaRenda"> | string
    nomeChefe?: StringWithAggregatesFilter<"FamiliaBaixaRenda"> | string
    rendaFamiliar?: FloatWithAggregatesFilter<"FamiliaBaixaRenda"> | number
    membros?: IntWithAggregatesFilter<"FamiliaBaixaRenda"> | number
    status?: StringWithAggregatesFilter<"FamiliaBaixaRenda"> | string
  }

  export type CadUnicoWhereInput = {
    AND?: CadUnicoWhereInput | CadUnicoWhereInput[]
    OR?: CadUnicoWhereInput[]
    NOT?: CadUnicoWhereInput | CadUnicoWhereInput[]
    id?: IntFilter<"CadUnico"> | number
    cpf?: StringFilter<"CadUnico"> | string
    nis?: StringFilter<"CadUnico"> | string
    situacao?: StringFilter<"CadUnico"> | string
    ultimaAtualizacao?: DateTimeFilter<"CadUnico"> | Date | string
  }

  export type CadUnicoOrderByWithRelationInput = {
    id?: SortOrder
    cpf?: SortOrder
    nis?: SortOrder
    situacao?: SortOrder
    ultimaAtualizacao?: SortOrder
  }

  export type CadUnicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    nis?: string
    AND?: CadUnicoWhereInput | CadUnicoWhereInput[]
    OR?: CadUnicoWhereInput[]
    NOT?: CadUnicoWhereInput | CadUnicoWhereInput[]
    situacao?: StringFilter<"CadUnico"> | string
    ultimaAtualizacao?: DateTimeFilter<"CadUnico"> | Date | string
  }, "id" | "cpf" | "nis">

  export type CadUnicoOrderByWithAggregationInput = {
    id?: SortOrder
    cpf?: SortOrder
    nis?: SortOrder
    situacao?: SortOrder
    ultimaAtualizacao?: SortOrder
    _count?: CadUnicoCountOrderByAggregateInput
    _avg?: CadUnicoAvgOrderByAggregateInput
    _max?: CadUnicoMaxOrderByAggregateInput
    _min?: CadUnicoMinOrderByAggregateInput
    _sum?: CadUnicoSumOrderByAggregateInput
  }

  export type CadUnicoScalarWhereWithAggregatesInput = {
    AND?: CadUnicoScalarWhereWithAggregatesInput | CadUnicoScalarWhereWithAggregatesInput[]
    OR?: CadUnicoScalarWhereWithAggregatesInput[]
    NOT?: CadUnicoScalarWhereWithAggregatesInput | CadUnicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CadUnico"> | number
    cpf?: StringWithAggregatesFilter<"CadUnico"> | string
    nis?: StringWithAggregatesFilter<"CadUnico"> | string
    situacao?: StringWithAggregatesFilter<"CadUnico"> | string
    ultimaAtualizacao?: DateTimeWithAggregatesFilter<"CadUnico"> | Date | string
  }

  export type UserCreateInput = {
    cpf: string
    senha: string
    nome: string
    tipo: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    cpf: string
    senha: string
    nome: string
    tipo: string
  }

  export type UserUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    cpf: string
    senha: string
    nome: string
    tipo: string
  }

  export type UserUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type FamiliaBaixaRendaCreateInput = {
    chefeFamiliaCPF: string
    nomeChefe: string
    rendaFamiliar: number
    membros: number
    status: string
  }

  export type FamiliaBaixaRendaUncheckedCreateInput = {
    id?: number
    chefeFamiliaCPF: string
    nomeChefe: string
    rendaFamiliar: number
    membros: number
    status: string
  }

  export type FamiliaBaixaRendaUpdateInput = {
    chefeFamiliaCPF?: StringFieldUpdateOperationsInput | string
    nomeChefe?: StringFieldUpdateOperationsInput | string
    rendaFamiliar?: FloatFieldUpdateOperationsInput | number
    membros?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type FamiliaBaixaRendaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chefeFamiliaCPF?: StringFieldUpdateOperationsInput | string
    nomeChefe?: StringFieldUpdateOperationsInput | string
    rendaFamiliar?: FloatFieldUpdateOperationsInput | number
    membros?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type FamiliaBaixaRendaCreateManyInput = {
    id?: number
    chefeFamiliaCPF: string
    nomeChefe: string
    rendaFamiliar: number
    membros: number
    status: string
  }

  export type FamiliaBaixaRendaUpdateManyMutationInput = {
    chefeFamiliaCPF?: StringFieldUpdateOperationsInput | string
    nomeChefe?: StringFieldUpdateOperationsInput | string
    rendaFamiliar?: FloatFieldUpdateOperationsInput | number
    membros?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type FamiliaBaixaRendaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chefeFamiliaCPF?: StringFieldUpdateOperationsInput | string
    nomeChefe?: StringFieldUpdateOperationsInput | string
    rendaFamiliar?: FloatFieldUpdateOperationsInput | number
    membros?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CadUnicoCreateInput = {
    cpf: string
    nis: string
    situacao: string
    ultimaAtualizacao: Date | string
  }

  export type CadUnicoUncheckedCreateInput = {
    id?: number
    cpf: string
    nis: string
    situacao: string
    ultimaAtualizacao: Date | string
  }

  export type CadUnicoUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nis?: StringFieldUpdateOperationsInput | string
    situacao?: StringFieldUpdateOperationsInput | string
    ultimaAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CadUnicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nis?: StringFieldUpdateOperationsInput | string
    situacao?: StringFieldUpdateOperationsInput | string
    ultimaAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CadUnicoCreateManyInput = {
    id?: number
    cpf: string
    nis: string
    situacao: string
    ultimaAtualizacao: Date | string
  }

  export type CadUnicoUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nis?: StringFieldUpdateOperationsInput | string
    situacao?: StringFieldUpdateOperationsInput | string
    ultimaAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CadUnicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nis?: StringFieldUpdateOperationsInput | string
    situacao?: StringFieldUpdateOperationsInput | string
    ultimaAtualizacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FamiliaBaixaRendaCountOrderByAggregateInput = {
    id?: SortOrder
    chefeFamiliaCPF?: SortOrder
    nomeChefe?: SortOrder
    rendaFamiliar?: SortOrder
    membros?: SortOrder
    status?: SortOrder
  }

  export type FamiliaBaixaRendaAvgOrderByAggregateInput = {
    id?: SortOrder
    rendaFamiliar?: SortOrder
    membros?: SortOrder
  }

  export type FamiliaBaixaRendaMaxOrderByAggregateInput = {
    id?: SortOrder
    chefeFamiliaCPF?: SortOrder
    nomeChefe?: SortOrder
    rendaFamiliar?: SortOrder
    membros?: SortOrder
    status?: SortOrder
  }

  export type FamiliaBaixaRendaMinOrderByAggregateInput = {
    id?: SortOrder
    chefeFamiliaCPF?: SortOrder
    nomeChefe?: SortOrder
    rendaFamiliar?: SortOrder
    membros?: SortOrder
    status?: SortOrder
  }

  export type FamiliaBaixaRendaSumOrderByAggregateInput = {
    id?: SortOrder
    rendaFamiliar?: SortOrder
    membros?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CadUnicoCountOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    nis?: SortOrder
    situacao?: SortOrder
    ultimaAtualizacao?: SortOrder
  }

  export type CadUnicoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CadUnicoMaxOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    nis?: SortOrder
    situacao?: SortOrder
    ultimaAtualizacao?: SortOrder
  }

  export type CadUnicoMinOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    nis?: SortOrder
    situacao?: SortOrder
    ultimaAtualizacao?: SortOrder
  }

  export type CadUnicoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}